var documenterSearchIndex = {"docs":
[{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"EditURL = \"https://github.com/JuliaGraphs/MetaGraphsNext.jl/blob/master/test/tutorial/1_basics.jl\"","category":"page"},{"location":"tutorial/1_basics/#Basics","page":"Basics","title":"Basics","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"using Graphs\nusing MetaGraphsNext","category":"page"},{"location":"tutorial/1_basics/#Creating-a-MetaGraph","page":"Basics","title":"Creating a MetaGraph","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"We provide a default constructor which looks as follows:","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"colors = MetaGraph(\n    Graph();  # underlying graph structure\n    Label=Symbol,  # color name\n    VertexData=NTuple{3,Int},  # RGB code\n    EdgeData=String,  # result of the addition between two colors\n    graph_data=\"additive colors\",  # tag for the whole graph\n)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"The Label type defines how vertices will be referred to, it can be anything but an integer type (to avoid confusion with codes, see below). The VertexData and EdgeData type determine what kind of data will be associated with each vertex and edge. Finally, graph_data can contain an arbitrary object associated with the graph as a whole.","category":"page"},{"location":"tutorial/1_basics/#Modifying-the-graph","page":"Basics","title":"Modifying the graph","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"Modifications of graph elements and the associated metadata can always be done using setindex! (as in a dictionary) with the relevant labels.","category":"page"},{"location":"tutorial/1_basics/#Vertices","page":"Basics","title":"Vertices","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"Use setindex! with one key to add a new vertex with the given label and metadata. If a vertex with the given label does not exist, it will be created automatically. Otherwise, the function will simply modify the metadata for the existing vertex.","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"colors[:red] = (255, 0, 0);\ncolors[:green] = (0, 255, 0);\ncolors[:blue] = (0, 0, 255);\nnothing #hide","category":"page"},{"location":"tutorial/1_basics/#Edges","page":"Basics","title":"Edges","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"Use setindex! with two keys to add a new edge between the given labels and containing the given metadata. Beware that this time, nonexistent labels will throw an error.","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"colors[:red, :green] = \"yellow\";\ncolors[:red, :blue] = \"magenta\";\ncolors[:green, :blue] = \"cyan\";\nnothing #hide","category":"page"},{"location":"tutorial/1_basics/#Accessing-graph-properties","page":"Basics","title":"Accessing graph properties","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"To retrieve graph properties, we still follow a dictionary-like interface based on labels.","category":"page"},{"location":"tutorial/1_basics/#Existence","page":"Basics","title":"Existence","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"To check the presence of a vertex or edge, use haskey:","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"haskey(colors, :red)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"haskey(colors, :black)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"haskey(colors, :red, :green) && haskey(colors, :green, :red)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"!haskey(colors, :red, :black)","category":"page"},{"location":"tutorial/1_basics/#Metadata","page":"Basics","title":"Metadata","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"All kinds of metadata can be accessed with getindex:","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"colors[]","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"colors[:blue]","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"colors[:green, :blue]","category":"page"},{"location":"tutorial/1_basics/#Using-vertex-codes","page":"Basics","title":"Using vertex codes","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"In the absence of removal, vertex codes correspond to order of insertion in the underlying graph. They are the ones used by most algorithms in the Graphs.jl ecosystem.","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"code_for(colors, :red)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"code_for(colors, :blue)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"You can retrieve the associated labels as follows:","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"label_for(colors, 1)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"label_for(colors, 3)","category":"page"},{"location":"tutorial/1_basics/#Adding-weights","page":"Basics","title":"Adding weights","text":"","category":"section"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"The most simple way to add edge weights is to speficy a default weight for all of them.","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"weighted_default = MetaGraph(Graph(); default_weight=2);\nnothing #hide","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"default_weight(weighted_default)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"weighttype(weighted_default)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"You can use the weight_function keyword to specify a function which will transform edge metadata into a weight. This weight must always be the same type as the default_weight.","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"weighted = MetaGraph(Graph(); EdgeData=Float64, weight_function=ed -> ed^2);\n\nweighted[:alice] = nothing;\nweighted[:bob] = nothing;\nweighted[:alice, :bob] = 2.0;\nnothing #hide","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"weight_matrix = Graphs.weights(weighted)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"size(weight_matrix)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"weight_matrix[1, 2]","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"wf = get_weight_function(weighted)\nwf(3)","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"You can then use all functions from Graphs.jl that require weighted graphs (see the rest of the tutorial).","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"","category":"page"},{"location":"tutorial/1_basics/","page":"Basics","title":"Basics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/#Docstrings","page":"API reference","title":"Docstrings","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [MetaGraphsNext]","category":"page"},{"location":"api/#MetaGraphsNext.DOTFormat","page":"API reference","title":"MetaGraphsNext.DOTFormat","text":"struct DOTFormat <: AbstractGraphFormat end\n\nIf all metadata types support pairs or are Nothing, you can save MetaGraphs in DOTFormat.\n\n\n\n\n\n","category":"type"},{"location":"api/#MetaGraphsNext.MGFormat","page":"API reference","title":"MetaGraphsNext.MGFormat","text":"struct MGFormat <: AbstractGraphFormat end\n\nYou can save MetaGraphs in a MGFormat, currently based on JLD2.\n\n\n\n\n\n","category":"type"},{"location":"api/#MetaGraphsNext.MetaDiGraph","page":"API reference","title":"MetaGraphsNext.MetaDiGraph","text":"MetaDiGraph\n\nA MetaGraph whose underlying graph is of type Graphs.SimpleDiGraph.\n\n\n\n\n\n","category":"type"},{"location":"api/#MetaGraphsNext.MetaGraph","page":"API reference","title":"MetaGraphsNext.MetaGraph","text":"MetaGraph{Code<:Integer,Label,Graph,VertexData,EdgeData,GraphData,WeightFunction,Weight<:Real} <: AbstractGraph{Code}\n\nA graph type with custom vertex labels containing vertex-, edge- and graph-level metadata.\n\nVertex labels have type Label, while vertex (resp. edge, resp. graph) metadata has type VertexData (resp. EdgeData, resp. GraphData). It is recommended not to set Label to an integer type, so as to avoid confusion between vertex labels and vertex codes (which have type Code<:Integer).\n\nFields\n\ngraph::Graph: underlying, data-less graph with vertex indices of type Code\nvertex_labels::Dict{Code,Label}: dictionary mapping vertex codes to vertex labels\nvertex_properties::Dict{Label,Tuple{Code,VertexData}}: dictionary mapping vertex labels to vertex codes & data\nedge_data::Dict{Tuple{Label,Label},EdgeData}: dictionary mapping edge labels such as (label_u, label_v) to edge metadata\ngraph_data::GraphData: graph metadata\nweight_function::WeightFunction: function defining edge weight from edge metadata\ndefault_weight::Weight: default weight for the edges\n\n\n\n\n\n","category":"type"},{"location":"api/#MetaGraphsNext.MetaGraph-Union{Tuple{AbstractGraph{Code}}, Tuple{Code}} where Code","page":"API reference","title":"MetaGraphsNext.MetaGraph","text":"MetaGraph(\n    graph;\n    Label = Symbol,\n    VertexData = Nothing,\n    EdgeData = Nothing,\n    graph_data = nothing,\n    weight_function = edge_data -> 1.0,\n    default_weight = 1.0\n)\n\nConstruct an empty MetaGraph with the given metadata types and weights.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext.MetaUndirectedGraph","page":"API reference","title":"MetaGraphsNext.MetaUndirectedGraph","text":"MetaUndirectedGraph\n\nA MetaGraph whose underlying graph is of type Graphs.SimpleGraph.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.delete!-Tuple{MetaGraph, Any, Any}","page":"API reference","title":"Base.delete!","text":"delete!(meta_graph, label_1, label_2)\n\nDelete edge (label_1, label_2).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.delete!-Tuple{MetaGraph, Any}","page":"API reference","title":"Base.delete!","text":"delete!(meta_graph, label)\n\nDelete vertex label.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{MetaGraph, Any, Any}","page":"API reference","title":"Base.getindex","text":"getindex(meta_graph, label_1, label_2)\n\nReturn edge metadata for the edge between label_1 and label_2.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{MetaGraph, Any}","page":"API reference","title":"Base.getindex","text":"getindex(meta_graph, label)\n\nReturn vertex metadata for label.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{MetaGraphsNext.MetaWeights, Integer, Integer}","page":"API reference","title":"Base.getindex","text":"getindex(meta_weights::MetaWeights, code_1, code_2)\n\nGet the weight of edge (code_1, code_2).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{MetaGraph}","page":"API reference","title":"Base.getindex","text":"getindex(meta_graph)\n\nReturn meta_graph metadata.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.haskey-Tuple{MetaGraph, Any, Any}","page":"API reference","title":"Base.haskey","text":"haskey(meta_graph, label_1, label_2)\n\nDetermine whether a metagraph `metagraphcontains an edge fromlabel1tolabel2`.\n\nThe order of label_1 and label_2 only matters if meta_graph is a digraph.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.haskey-Tuple{MetaGraph, Any}","page":"API reference","title":"Base.haskey","text":"haskey(meta_graph, label)\n\nDetermine whether a metagraph `metagraphcontains the vertexlabel`.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Tuple{MetaGraph, Any, Any, Any}","page":"API reference","title":"Base.setindex!","text":"setindex!(meta_graph, data, label_1, label_2)\n\nSet edge metadata for (label_1, label_2) to data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Tuple{MetaGraph, Any, Any}","page":"API reference","title":"Base.setindex!","text":"setindex!(meta_graph, data, label)\n\nSet vertex metadata for label to data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Graphs.SimpleGraphs.add_edge!-Tuple{MetaGraph, Any, Any, Any}","page":"API reference","title":"Graphs.SimpleGraphs.add_edge!","text":"add_edge!(meta_graph, label_1, label_2, data)\n\nAdd an edge (label_1, label_2) to MetaGraph meta_graph with metadata data.\n\nReturn true if the edge has been added, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#Graphs.SimpleGraphs.add_vertex!-Tuple{MetaGraph, Any, Any}","page":"API reference","title":"Graphs.SimpleGraphs.add_vertex!","text":"add_vertex!(meta_graph, label, data)\n\nAdd a vertex to MetaGraph meta_graph with label label having metadata data.\n\nReturn true if the vertex has been added, false incase the label already exists or vertex was not added.\n\n\n\n\n\n","category":"method"},{"location":"api/#Graphs.weights-Tuple{MetaGraph}","page":"API reference","title":"Graphs.weights","text":"weights(meta_graph)\n\nReturn a matrix-like MetaWeights object containing the edge weights for metagraph meta_graph.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext._copy_props!-Tuple{MetaGraph, MetaGraph, Any}","page":"API reference","title":"MetaGraphsNext._copy_props!","text":"_copy_props!(old_meta_graph, new_meta_graph, code_map)\n\nCopy properties from old_meta_graph to new_meta_graph following vertex map code_map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext.arrange","page":"API reference","title":"MetaGraphsNext.arrange","text":"arrange(graph, label_1, label_2)\n\nSort two vertex labels in a default order (useful to uniquely express undirected edges).\n\n\n\n\n\n","category":"function"},{"location":"api/#MetaGraphsNext.code_for-Tuple{MetaGraph, Any}","page":"API reference","title":"MetaGraphsNext.code_for","text":"code_for(meta_graph::MetaGraph, label)\n\nFind the vertex code (or index) associated with label label.\n\nThis can be useful to pass to methods inherited from Graphs. Note, however, that vertex codes can be reassigned after vertex deletion.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext.default_weight-Tuple{MetaGraph}","page":"API reference","title":"MetaGraphsNext.default_weight","text":"default_weight(meta_graph)\n\nReturn the default weight for metagraph meta_graph.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext.get_weight_function-Tuple{MetaGraph}","page":"API reference","title":"MetaGraphsNext.get_weight_function","text":"get_weight_function(meta_graph)\n\nReturn the weight function for metagraph meta_graph.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext.label_for-Tuple{MetaGraph, Integer}","page":"API reference","title":"MetaGraphsNext.label_for","text":"label_for(meta_graph::MetaGraph, code)\n\nFind the label associated with code code.\n\nThis can be useful to interpret the results of methods inherited from Graphs. Note, however, that vertex codes can be reassigned after vertex deletion.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext.set_data!-Tuple{MetaGraph, Any, Any, Any}","page":"API reference","title":"MetaGraphsNext.set_data!","text":"set_data!(meta_graph, label_1, label_2, data)\n\nSet edge metadata for (label_1, label_2) to data.\n\nReturn true if the operation succeeds, and false if meta_graph has no such edge.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext.set_data!-Tuple{MetaGraph, Any, Any}","page":"API reference","title":"MetaGraphsNext.set_data!","text":"set_data!(meta_graph, label, data)\n\nSet vertex metadata for label to data.\n\nReturn true if the operation succeeds, and false if meta_graph has no such vertex.\n\n\n\n\n\n","category":"method"},{"location":"api/#MetaGraphsNext.weighttype-Union{Tuple{MetaGraph{<:Any, <:Any, <:Any, <:Any, <:Any, <:Any, <:Any, Weight}}, Tuple{Weight}} where Weight","page":"API reference","title":"MetaGraphsNext.weighttype","text":"weighttype(meta_graph)\n\nReturn the weight type for metagraph meta_graph.\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API reference","title":"API reference","text":"haskey\ngetindex\nsetindex!\ndelete!","category":"page"},{"location":"api/#Base.haskey","page":"API reference","title":"Base.haskey","text":"haskey(meta_graph, label)\n\nDetermine whether a metagraph `metagraphcontains the vertexlabel`.\n\n\n\n\n\nhaskey(meta_graph, label_1, label_2)\n\nDetermine whether a metagraph `metagraphcontains an edge fromlabel1tolabel2`.\n\nThe order of label_1 and label_2 only matters if meta_graph is a digraph.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.getindex","page":"API reference","title":"Base.getindex","text":"getindex(meta_graph)\n\nReturn meta_graph metadata.\n\n\n\n\n\ngetindex(meta_graph, label)\n\nReturn vertex metadata for label.\n\n\n\n\n\ngetindex(meta_graph, label_1, label_2)\n\nReturn edge metadata for the edge between label_1 and label_2.\n\n\n\n\n\ngetindex(meta_weights::MetaWeights, code_1, code_2)\n\nGet the weight of edge (code_1, code_2).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.setindex!","page":"API reference","title":"Base.setindex!","text":"setindex!(meta_graph, data, label)\n\nSet vertex metadata for label to data.\n\n\n\n\n\nsetindex!(meta_graph, data, label_1, label_2)\n\nSet edge metadata for (label_1, label_2) to data.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.delete!","page":"API reference","title":"Base.delete!","text":"delete!(meta_graph, label)\n\nDelete vertex label.\n\n\n\n\n\ndelete!(meta_graph, label_1, label_2)\n\nDelete edge (label_1, label_2).\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API reference","title":"API reference","text":"add_vertex!\nadd_edge!\nweights","category":"page"},{"location":"api/#Graphs.SimpleGraphs.add_vertex!","page":"API reference","title":"Graphs.SimpleGraphs.add_vertex!","text":"add_vertex!(meta_graph, label, data)\n\nAdd a vertex to MetaGraph meta_graph with label label having metadata data.\n\nReturn true if the vertex has been added, false incase the label already exists or vertex was not added.\n\n\n\n\n\n","category":"function"},{"location":"api/#Graphs.SimpleGraphs.add_edge!","page":"API reference","title":"Graphs.SimpleGraphs.add_edge!","text":"add_edge!(meta_graph, label_1, label_2, data)\n\nAdd an edge (label_1, label_2) to MetaGraph meta_graph with metadata data.\n\nReturn true if the edge has been added, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/#Graphs.weights","page":"API reference","title":"Graphs.weights","text":"weights(meta_graph)\n\nReturn a matrix-like MetaWeights object containing the edge weights for metagraph meta_graph.\n\n\n\n\n\n","category":"function"},{"location":"api/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"EditURL = \"https://github.com/JuliaGraphs/MetaGraphsNext.jl/blob/master/test/tutorial/3_files.jl\"","category":"page"},{"location":"tutorial/3_files/#File-storage","page":"File storage","title":"File storage","text":"","category":"section"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"using Graphs\nusing MetaGraphsNext","category":"page"},{"location":"tutorial/3_files/#MGFormat","page":"File storage","title":"MGFormat","text":"","category":"section"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"MetaGraphsNext.jl overloads Graphs.savegraph to write graphs in a custom format called MGFormat, which is based on JLD2. It is not very readable, but it does give the right result when we load it back.","category":"page"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"example = MetaGraph(Graph());\n\nexample2 = mktemp() do file, io\n    savegraph(file, example)\n    loadgraph(file, \"something\", MGFormat())\nend\n\nexample2 == example","category":"page"},{"location":"tutorial/3_files/#DOTFormat","page":"File storage","title":"DOTFormat","text":"","category":"section"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"MetaGraphsNext.jl also support the more standard DOT encoding, which is used as follows.","category":"page"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"simple = MetaGraph(Graph());\n\nsimple[:a] = nothing;\nsimple[:b] = nothing;\nsimple[:a, :b] = nothing;\n\nsimple_str = mktemp() do file, io\n    savegraph(file, simple, DOTFormat())\n    read(file, String)\nend\n\nprint(simple_str)","category":"page"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"complicated = MetaGraph(\n    DiGraph();\n    VertexData=Dict{Symbol,Int},\n    EdgeData=Dict{Symbol,Int},\n    graph_data=(tagged=true,),\n);\n\ncomplicated[:a] = Dict(:code_1 => 1, :code_2 => 2);\n\ncomplicated[:b] = Dict(:code => 2);\n\ncomplicated[:a, :b] = Dict(:code => 12);\n\ncomplicated_str = mktemp() do file, io\n    savegraph(file, complicated, DOTFormat())\n    read(file, String)\nend\n\nprint(complicated_str)","category":"page"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"","category":"page"},{"location":"tutorial/3_files/","page":"File storage","title":"File storage","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#MetaGraphsNext.jl","page":"Home","title":"MetaGraphsNext.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to MetaGraphsNext.jl, a type-stable replacement for MetaGraphs.jl. It allows you to create graphs with vertex and edge metadata, on which you can unleash the full power of the Graphs.jl ecosystem.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, open the Julia REPL and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"MetaGraphsNext\")","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"EditURL = \"https://github.com/JuliaGraphs/MetaGraphsNext.jl/blob/master/test/tutorial/2_graphs.jl\"","category":"page"},{"location":"tutorial/2_graphs/#Graphs.jl-interface","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"","category":"section"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"using Graphs\nusing MetaGraphsNext","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"MetaGraphs inherit many methods from Graphs.jl. In general, inherited methods refer to vertices by codes, not labels, for compatibility with the AbstractGraph interface.","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"Note that vertex codes get reassigned after rem_vertex! operations to remain contiguous, so we recommend systematically converting to and from labels.","category":"page"},{"location":"tutorial/2_graphs/#Undirected-graphs","page":"Graphs.jl  interface","title":"Undirected graphs","text":"","category":"section"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"We can make MetaGraphs based on (undirected) Graphs.","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"cities = MetaGraph(\n    Graph();\n    Label=Symbol,\n    VertexData=String,\n    EdgeData=Int,\n    weight_function=identity,\n    default_weight=0,\n);\nnothing #hide","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"Let us add some cities and the distance between them:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"cities[:Paris] = \"France\";\ncities[:London] = \"UK\";\ncities[:Berlin] = \"Germany\";\ncities[:Paris, :London] = 344;\ncities[:Paris, :Berlin] = 878;\nnothing #hide","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"The general properties of the graph are as expected:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"is_directed(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"eltype(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"edgetype(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"SimpleGraph(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"We can check the set of vertices:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"nv(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"collect(vertices(cities))","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"has_vertex(cities, 2)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"has_vertex(cities, 4)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"Note that we can't add the same city (i.e. vertex label) twice:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"add_vertex!(cities, :London, \"Italy\")","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"nv(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"cities[:London]","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"We then check the set of edges:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"ne(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"collect(edges(cities))","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"has_edge(cities, 1, 2)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"has_edge(cities, 2, 3)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"From this initial graph, we can create some others:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"copy(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"zero(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"Since cities is a weighted graph, we can leverage the whole Graphs.jl machinery of graph analysis and traversal:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"diameter(cities)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"ds = dijkstra_shortest_paths(cities, 2)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"Finally, let us remove some edges and vertices","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"rem_edge!(cities, 1, 3);\nrem_vertex!(cities, 3);\nhas_vertex(cities, 1) && !has_vertex(cities, 3)","category":"page"},{"location":"tutorial/2_graphs/#Directed-graphs","page":"Graphs.jl  interface","title":"Directed graphs","text":"","category":"section"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"We can make MetaGraphs based on DiGraphs as well.","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"rock_paper_scissors = MetaGraph(DiGraph(); Label=Symbol, EdgeData=String);\n\nfor label in [:rock, :paper, :scissors]\n    rock_paper_scissors[label] = nothing\nend\n\nrock_paper_scissors[:rock, :scissors] = \"rock beats scissors\"\nrock_paper_scissors[:scissors, :paper] = \"scissors beat paper\"\nrock_paper_scissors[:paper, :rock] = \"paper beats rock\";\nnothing #hide","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"We see that the underlying graph has changed:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"is_directed(rock_paper_scissors)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"SimpleDiGraph(rock_paper_scissors)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"Directed graphs can be reversed:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"haskey(rock_paper_scissors, :scissors, :rock)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"haskey(reverse(rock_paper_scissors), :scissors, :rock)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"Finally, let us take a subgraph:","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"rock_paper, _ = induced_subgraph(rock_paper_scissors, [1, 2])","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"issubset(rock_paper, rock_paper_scissors)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"haskey(rock_paper, :paper, :rock)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"haskey(rock_paper, :rock, :scissors)","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"","category":"page"},{"location":"tutorial/2_graphs/","page":"Graphs.jl  interface","title":"Graphs.jl  interface","text":"This page was generated using Literate.jl.","category":"page"}]
}
